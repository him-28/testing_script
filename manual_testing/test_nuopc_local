#!/bin/bash -l
#source /opt/Modules/init/bash
#export MODULEPATH=/opt/Modules/modulefiles
#source $ESMF_DIR/source.modules
module list

echo "---------------------- test_nuopc_local -----------------------"

# verify following are set by user:
: "${ESMF_DIR?Need to set ESMF_DIR}"
: "${homedir?Need to set homedir}"
: "${LOGDIR?Need to set LOGDIR}"
: "${NUOPCDIR?Need to set NUOPCDIR}"

: "${ESMF_COMPILER?Need to set ESMF_COMPILER}"
: "${ESMF_COMM?Need to set ESMF_COMM}"
: "${ESMF_BOPT?Need to set ESMF_BOPT}"
: "${ESMF_OS?Need to set ESMF_OS}"
: "${ESMF_ABI?Need to set ESMF_ABI}"
: "${ESMF_SITE?Need to set ESMF_SITE}"
: "${ESMF_TESTEXHAUSTIVE?Need to set ESMF_TESTEXHAUSTIVE}"
: "${ESMF_TESTWITHTHREADS?Need to set ESMF_TESTWITHTHREADS}"

#env

# The following toggles allow turning on/off portions of this script
# The benchmarking portion has not yet been tested.
build=1

OPT=$ESMF_BOPT
export ESMFMKFILE=$ESMF_DIR/DEFAULTINSTALLDIR/lib/lib$OPT/$ESMF_OS.$ESMF_COMPILER.$ESMF_ABI.$ESMF_COMM.$ESMF_SITE/esmf.mk

echo "ESMF_DIR = $ESMF_DIR"
echo "ESMF_COMPILER = $ESMF_COMPILER" 
echo "ESMF_COMM = $ESMF_COMM" 
echo "ESMF_BOPT = $ESMF_BOPT" 
echo "ESMF_TESTEXHAUSTIVE = $ESMF_TESTEXHAUSTIVE" 
echo "ESMF_TESTWITHTHREADS = $ESMF_TESTWITHTHREADS" 

echo "SYS_TEST_TYPE = $SYS_TEST_TYPE" 
echo "U_TEST_TYPE = $U_TEST_TYPE" 
echo "U_TESTS = $U_TESTS" 
echo "THREADED = $THREADED" 

echo "homedir = $homedir"
echo "NUOPCDIR = $NUOPCDIR"
echo "LOGDIR = $LOGDIR"
echo "ESMFMKFILE = $ESMFMKFILE"


cd $ESMF_DIR

gmake info

#Clobber previous arch files
if [ "$build" == "1" ]; then
  make  -j4 clobber  1> tmp 2>&1
fi


echo "" >> $LOGDIR/mailMessage
echo "________________________________________________________________________________________" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage

test_results=0  #assume build passes
install_results=0  #assume install passes
tests=0
test_failures=0
ex_passed=0
ex_failed=0

echo "`date` on `uname -n` " >> $LOGDIR/mailMessage

read chkout_src <  ~/bin/esmf_chkout_src
#if read fails default:git://git.code.sf.net/p/esmf/esmf
if [ "$?" != "0" ]
then
        export chkout_src="git://git.code.sf.net/p/esmf/esmf"
fi
echo "" >> $LOGDIR/mailMessage
echo "ESMF Checkout Source: $chkout_src" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage


echo "Compiler and configuration information:" >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage
echo "-------------------------------------------------------------- " >> $LOGDIR/mailMessage

module list  1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo "" >> $LOGDIR/mailMessage
git remote -v 1> tmp 2>&1

if (grep -i "Not a git repository" tmp)
then
        #Checkout failed
        echo "Test_results:blue" > $LOGDIR/Test_Status
fi

echo "ESMF Repository:" >> $LOGDIR/mailMessage
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
git describe --tags 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage


cd $NUOPCDIR
svn info 1> tmp 2>&1
echo "NUOPC Repository:" >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
cat tmp >> $LOGDIR/mailMessage
echo " " >> $LOGDIR/mailMessage
cd $ESMF_DIR


gmake ESMF_BOPT=$OPT info 1> tmp 2>&1
cat tmp >> $LOGDIR/mailMessage



if [ "$build" == "1" ]; then
  echo "|------------------------ ESMF BUILD ----------------------------|"
  make -j8 ESMF_BOPT=$OPT  1> tmp 2>&1
fi

if [ "$?" != "0" ]
then
        echo "Library build FAIL with ESMF_BOPT=$OPT"

	if [ $OPT != g ]
	then 
		cat tmp > $LOGDIR/build_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	else
		cat tmp > $LOGDIR/build_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
	fi #end of if [ $OPT != g ]

	echo "`date` library build -j4 *************************FAILED" >> $LOGDIR/mailMessage
	test_results=1
	echo "" >> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
	echo "The following is the 'tail' of the build failure">> $LOGDIR/mailMessage
	echo "" >> $LOGDIR/mailMessage
        tail  -50 tmp >> $LOGDIR/mailMessage


        # If checkout did not fail, set test status to red, build failed
        if !(grep "blue" $LOGDIR/Test_Status)
        then
                echo "Test_results:red" > $LOGDIR/Test_Status
                echo "Set Test Status to red."
        fi

	

else

       	echo "Library build PASSED with ESMF_BOPT=$OPT"
	echo "`date` library build -j4 .........................PASSED" >> $LOGDIR/mailMessage

        # Check for warnings
        if grep -i "warning[ ]*:" tmp
        then
                echo "Builds with warnings." >> $LOGDIR/mailMessage
        fi



        gmake  ESMF_BOPT=$OPT  install 1> tmp 2>&1
        if [ "$?" != "0" ]
        then
                echo "Library install FAILED with ESMF_BOPT=$OPT"
                install_results=1  # install failed

                if [ $OPT != g ]
                then
                        cat tmp > $LOGDIR/install_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                else
                        cat tmp > $LOGDIR/install_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                fi #end of if [ $OPT != g ]

                echo "`date` library install ***************************FAILED" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
		# Set test status as yellow, if it is not red
       		if !(grep "red" $LOGDIR/Test_Status)
               	then
               		echo "Test_results:yellow" > $LOGDIR/Test_Status
                       	echo "Set Test Status to yellow."
                fi

                echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                echo "" >> $LOGDIR/mailMessage
                tail  -50 tmp >> $LOGDIR/mailMessage

                else

                echo "Library install PASSED with ESMF_BOPT=$OPT"
                echo "`date` library install ...........................PASSED" >> $LOGDIR/mailMessage

                gmake  ESMF_BOPT=$OPT  installcheck 1> tmp 2>&1
                if [ "$?" != "0" ]
                then
                        echo "Library install check FAILED with ESMF_BOPT=$OPT"
                        install_results=1  # install failed

                        if [ $OPT != g ]
                        then
                                cat tmp > $LOGDIR/installcheck_O_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        else
                                cat tmp > $LOGDIR/installcheck_g_`date +%d``uname -n`$ESMF_OS$ESMF_ABI$ESMF_COMPILER$ESMF_COMM
                        fi #end of if [ $OPT != g ]

                        echo "`date` library installcheck **********************FAILED" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        echo "The following is the 'tail' of the install failure">> $LOGDIR/mailMessage
                        echo "" >> $LOGDIR/mailMessage
                        tail  -50 tmp >> $LOGDIR/mailMessage
                	# Set test status as yellow, if it is not red
                	if !(grep "red" $LOGDIR/Test_Status)
                	then
                        	echo "Test_results:yellow" > $LOGDIR/Test_Status
                        	echo "Set Test Status to yellow."
                	fi



                        else

                        echo "Library installcheck PASSED with ESMF_BOPT=$OPT"
                        echo "`date` library installcheck ......................PASSED" >> $LOGDIR/mailMessage


			export pass_num=0
                        export fail_num=0

			echo "" >> $LOGDIR/mailMessage
			echo "" >> $LOGDIR/mailMessage
			echo "|---------------------------------- NUOPC TESTS ----------------------------|" >> $LOGDIR/mailMessage



                        cd $NUOPCDIR/AsyncIOBlockingProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then 
                                echo " AsyncIOBlockingProto failed to build"   
                                echo "`date` Build AsyncIOBlockingProto *****************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AsyncIOBlockingProto build failure">> $LOGDIR/mailMessage                            
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi      
                                
                        else
                                echo " AsyncIOBlockingProto built successfully"  
                                echo "`date` Build AsyncIOBlockingProto .................PASSED" >> $LOGDIR/mailMessage
                                
                        fi
                        


                        $ESMF_MPIRUN -np 4 ./asyncIOApp 1> AsyncIOBlockingProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AsyncIOBlockingProto failed to run"                                
                                echo "`date` Run AsyncIOBlockingProto *******************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AsyncIOBlockingProto ran"                                
                                echo "`date` Run AsyncIOBlockingProto ...................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/AsyncIONonblockingProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AsyncIONonblockingProto failed to build"   
                                echo "`date` Build AsyncIONonblockingProto **************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AsyncIONonblockingProto build failure">> $LOGDIR/mailMessage    
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi      
                                
                        else
                                echo " AsyncIONonblockingProto built successfully"  
                                echo "`date` Build AsyncIONonblockingProto ..............PASSED" >> $LOGDIR/mailMessage
                                
                        fi      
                                

                        $ESMF_MPIRUN -np 4 ./asyncIOApp 1> AsyncIONonblockingProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AsyncIONonblockingProto failed to run"                                
                                echo "`date` Run AsyncIONonblockingProto ****************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AsyncIONonblockingProto ran"                                
                                echo "`date` Run AsyncIONonblockingProto ................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/AtmOcnConProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnConProto failed to build"   
                                echo "`date` Build AtmOcnConProto ***********************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnConProto build failure">> $LOGDIR/mailMessage 
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnConProto built successfully"  
                                echo "`date` Build AtmOcnConProto .......................PASSED" >> $LOGDIR/mailMessage

                        fi



                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnConProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnConProto failed to run"                                
                                echo "`date` Run AtmOcnConProto *************************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnConProto ran"                                
                                echo "`date` Run AtmOcnConProto .........................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/AtmOcnCplListProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnCplListProto failed to build"   
                                echo "`date` Build AtmOcnCplListProto *******************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnCplListProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnCplListProto built successfully"  
                                echo "`date` Build AtmOcnCplListProto ...................PASSED" >> $LOGDIR/mailMessage

                        fi


                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnCplListProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnCplListProto failed to run"                                
                                echo "`date` Run AtmOcnCplListProto *********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnCplListProto ran"                                
                                echo "`date` Run AtmOcnCplListProto .....................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/AtmOcnCplSetProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnCplSetProto failed to build"   
                                echo "`date` Build AtmOcnCplSetProto  *******************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnCplSetProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo "  AtmOcnCplSetProto built successfully"  
                                echo "`date` Build AtmOcnCplSetProto ....................PASSED" >> $LOGDIR/mailMessage

                        fi


                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnCplSetProto.stdout  2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnCplSetProto failed to run"                                
                                echo "`date` Run AtmOcnCplSetProto **********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnCplSetProto ran"                                
                                echo "`date` Run AtmOcnCplSetProto  .....................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/AtmOcnFDSynoProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnFDSynoProto failed to build"   
                                echo "`date` Build AtmOcnFDSynoProto ********************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnFDSynoProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnFDSynoProto built successfully"  
                                echo "`date` Build AtmOcnFDSynoProto ....................PASSED" >> $LOGDIR/mailMessage

                        fi



 

                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnFDSynoProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnFDSynoProto failed to run"                                
                                echo "`date` Run AtmOcnFDSynoProto **********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnFDSynoProto ran"                                
                                echo "`date` Run AtmOcnFDSynoProto ......................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/AtmOcnIceSimpleImplicitProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnIceSimpleImplicitProto failed to build"   
                                echo "`date` Build AtmOcnIceSimpleImplicitProto *********FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnIceSimpleImplicitProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo "  AtmOcnIceSimpleImplicitProto built successfully"  
                                echo "`date` Build AtmOcnIceSimpleImplicitProto .........PASSED" >> $LOGDIR/mailMessage

                        fi






                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnIceSimpleImplicitProto.stdout  2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnIceSimpleImplicitProto failed to run"                                
                                echo "`date` Run AtmOcnIceSimpleImplicitProto ***********FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnIceSimpleImplicitProto ran"                                
                                echo "`date` Run AtmOcnIceSimpleImplicitProto ...........PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi


                        cd $NUOPCDIR/AtmOcnImplicitProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnImplicitProto failed to build"   
                                echo "`date` Build AtmOcnImplicitProto ******************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnImplicitProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnImplicitProto built successfully"  
                                echo "`date` Build AtmOcnImplicitProto ..................PASSED" >> $LOGDIR/mailMessage

                        fi


 

                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnImplicitProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnImplicitProto failed to run"                                
                                echo "`date` Run AtmOcnImplicitProto ********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnImplicitProto ran"                                
                                echo "`date` Run AtmOcnImplicitProto ....................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        cd $NUOPCDIR/AtmOcnLndProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnLndProto failed to build"
                                echo "`date` Build AtmOcnLndProto ***********************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnLndProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnLndProto built successfully"
                                echo "`date` Build AtmOcnLndProto .......................PASSED" >> $LOGDIR/mailMessage


                        fi


                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnLndProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnLndProto failed to run"
                                echo "`date` Run AtmOcnLndProto *************************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
				echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then    
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi      
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."
                            
                        else    
                                echo " AtmOcnLndProto ran"
                                echo "`date` Run AtmOcnLndProto .........................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi


                        cd $NUOPCDIR/AtmOcnLogNoneProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnLogNoneProto failed to build"   
                                echo "`date` Build AtmOcnLogNoneProto *******************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnLogNoneProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnLogNoneProto built successfully"  
                                echo "`date` Build AtmOcnLogNoneProto ...................PASSED" >> $LOGDIR/mailMessage

                        fi






                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnLogNoneProto.stdout  2>&1
                        count=`grep -o "FINISHED" AtmOcnLogNoneProto.stdout | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnLogNoneProto failed to run"                                
                                echo "`date` Run AtmOcnLogNoneProto *********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the AtmOcnLogNoneProto.stdout file: ">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat  AtmOcnLogNoneProto.stdout >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnLogNoneProto ran"                                
                                echo "`date` Run AtmOcnLogNoneProto .....................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi


                        cd $NUOPCDIR/AtmOcnMedIngestFromConfigProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedIngestFromConfigProto failed to build"   
                                echo "`date` Build AtmOcnMedIngestFromConfigProto *******FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnMedIngestFromConfigProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedIngestFromConfigProto built successfully"  
                                echo "`date` Build AtmOcnMedIngestFromConfigProto .......PASSED" >> $LOGDIR/mailMessage

                        fi





                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnMedIngestFromConfigProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedIngestFromConfigProto failed to run"                                
                                echo "`date` Run AtmOcnMedIngestFromConfigProto *********FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedIngestFromConfigProto ran"                                
                                echo "`date` Run AtmOcnMedIngestFromConfigProto .........PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/AtmOcnMedIngestFromInternalProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedIngestFromInternalProto failed to build"   
                                echo "`date` Build AtmOcnMedIngestFromInternalProto *****FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnMedIngestFromInternalProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedIngestFromInternalProto built successfully"  
                                echo "`date` Build AtmOcnMedIngestFromInternalProto .....PASSED" >> $LOGDIR/mailMessage

                        fi






                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnMedIngestFromInternalProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedIngestFromInternalProto failed to run"                                
                                echo "`date` Run AtmOcnMedIngestFromInternalProto *******FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedIngestFromInternalProto ran"                                
                                echo "`date` Run AtmOcnMedIngestFromInternalProto .......PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        cd $NUOPCDIR/AtmOcnMedPetListProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedPetListProto failed to build"
                                echo "`date` Build AtmOcnMedPetListProto ****************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage                                
				echo "The following is the 'tail' of the AtmOcnMedPetListProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedPetListProto built successfully"
                                echo "`date` Build AtmOcnMedPetListProto ................PASSED" >> $LOGDIR/mailMessage


                        fi


                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnMedPetListProto.stdout  2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedPetListProto failed to run"
                                echo "`date` Run AtmOcnMedPetListProto ******************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage                                
				echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedPetListProto ran"
                                echo "`date` Run AtmOcnMedPetListProto ..................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi




                        cd $NUOPCDIR/AtmOcnMedPetListTimescalesProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedPetListTimescalesProto failed to build"  
				echo "`date` Build AtmOcnMedPetListTimescalesProto ******FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage 
				echo "The following is the 'tail' of the AtmOcnMedPetListTimescalesProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedPetListTimescalesProto built successfully" 
				echo "`date` Build AtmOcnMedPetListTimescalesProto ......PASSED" >> $LOGDIR/mailMessage

                        fi


                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnMedPetListTimescalesProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedPetListTimescalesProto failed to run"                                
				echo "`date` Run AtmOcnMedPetListTimescalesProto ********FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage 	
				echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedPetListTimescalesProto ran"                                
				echo "`date` Run AtmOcnMedPetListTimescalesProto ........PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi



        

                        cd $NUOPCDIR/AtmOcnMedPetListTimescalesSplitFastProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedPetListTimescalesSplitFastProto failed to build"  
				echo "`date` Build AtmOcnMedPetListTimescalesSplitFastProto*FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage                                 
				echo "The following is the 'tail' of the AtmOcnMedPetListTimescalesSplitFastProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedPetListTimescalesSplitFastProto built successfully" 
                                echo "`date` Build AtmOcnMedPetListTimescalesSplitFastProto.PASSED" >> $LOGDIR/mailMessage

                        fi


                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnMedPetListTimescalesSplitFastProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedPetListTimescalesSplitFastProto failed to run"                              
                                echo "`date` Run AtmOcnMedPetListTimescalesSplitFastProto***FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage                                  
				echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedPetListTimescalesSplitFastProto ran" 
				echo "`date` Run AtmOcnMedPetListTimescalesSplitFastProto...PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi




                        cd $NUOPCDIR/AtmOcnMedProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMedProto failed to build"   
                                echo "`date` Build AtmOcnMedProto ***********************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnMedProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnMedProto built successfully"  
                                echo "`date` Build AtmOcnMedProto .......................PASSED" >> $LOGDIR/mailMessage

                        fi

 

                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnMedProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMedProto failed to run"                                
                                echo "`date` Run AtmOcnMedProto *************************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMedProto ran"                                
                                echo "`date` Run AtmOcnMedProto .........................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi


                        cd $NUOPCDIR/AtmOcnMirrorFieldsProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnMirrorFieldsProto failed to build"   
                                echo "`date` Build AtmOcnMirrorFieldsProto *************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnMirrorFieldsProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo "  AtmOcnMirrorFieldsProto built successfully"  
                                echo "`date` Build AtmOcnMirrorFieldsProto .............PASSED" >> $LOGDIR/mailMessage

                        fi






                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnMirrorFieldsProto.stdout  2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnMirrorFieldsProto failed to run"                                
                                echo "`date` Run AtmOcnMirrorFieldsProto *************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnMirrorFieldsProto ran"                                
                                echo "`date` Run AtmOcnMirrorFieldsProto ...............PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/AtmOcnPetListProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnPetListProto failed to build"   
                                echo "`date` Build AtmOcnPetListProto *******************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnPetListProton build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnPetListProton built successfully"  
                                echo "`date` Build AtmOcnPetListProto ...................PASSED" >> $LOGDIR/mailMessage

                        fi

 
 

                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnPetListProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnPetListProto failed to run"                                
                                echo "`date` Run AtmOcnPetListProto *********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnPetListProto ran"                                
                                echo "`date` Run AtmOcnPetListProto .....................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi






                        cd $NUOPCDIR/AtmOcnProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnProto failed to build"  
                                echo "`date` Build AtmOcnProto **************************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnProto built successfully" 
                                echo "`date` Build AtmOcnProto ..........................PASSED" >> $LOGDIR/mailMessage

                        fi


                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnProto failed to run"                                
                                echo "`date` Run AtmOcnProto ****************************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnProto ran"                                
                                echo "`date` Run AtmOcnProto ............................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi



                        cd $NUOPCDIR/AtmOcnRtmTwoTimescalesProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then 
                                echo " AtmOcnRtmTwoTimescalesProto failed to build"   
                                echo "`date` Build AtmOcnRtmTwoTimescalesProto **********FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnRtmTwoTimescalesProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi      
                                
                        else
                                echo " AtmOcnRtmTwoTimescalesProto built successfully"  
                                echo "`date` Build AtmOcnRtmTwoTimescalesProto ..........PASSED" >> $LOGDIR/mailMessage
                                
                        fi
                        

                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnRtmTwoTimescalesProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnRtmTwoTimescalesProto failed to run"                                
                                echo "`date` Run AtmOcnRtmTwoTimescalesProto ************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi      
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."
                                
                        else
                                echo " AtmOcnRtmTwoTimescalesProto ran"                                
                                echo "`date` Run AtmOcnRtmTwoTimescalesProto ............PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi


                        cd $NUOPCDIR/AtmOcnScalarProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnScalarProto failed to build"   
                                echo "`date` Build AtmOcnScalarProto ********************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnScalarProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnScalarProto built successfully"  
                                echo "`date` Build AtmOcnScalarProto ....................PASSED" >> $LOGDIR/mailMessage

                        fi






                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnScalarProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnScalarProto failed to run"                                
                                echo "`date` Run AtmOcnScalarProto **********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnScalarProto ran"                                
                                echo "`date` Run AtmOcnScalarProto ......................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi





                        echo "" >> $LOGDIR/mailMessage
			echo "|-------------------------------- ATM=A OCN=A,B,C --------------------------|" >> $LOGDIR/mailMessage
                        cd $NUOPCDIR/AtmOcnSelectExternalProto
                        gmake distclean
			./cleanSubs.csh
			./buildSubs.csh
                        gmake ATM=A OCN=A,B,C 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectExternalProto failed to build"   
                                echo "`date` Build AtmOcnSelectExternalProto ************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectExternalProto built successfully"  
                                echo "`date` Build AtmOcnSelectExternalProto ............PASSED" >> $LOGDIR/mailMessage

                        fi
			echo "OCN_SELECT: A" > esm.config
                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnPetListProtoA.ABC.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectExternalProto failed to run"                                
                                echo "`date` Run AtmOcnSelectExternalProto **************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectExternalProto ran"                                
                                echo "`date` Run AtmOcnSelectExternalProto ..............PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=B OCN=A,B,C --------------------------|" >> $LOGDIR/mailMessage
                        cd $NUOPCDIR/AtmOcnSelectExternalProto
                        gmake distclean
                        ./cleanSubs.csh
                        ./buildSubs.csh
                        gmake ATM=B OCN=A,B,C 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectExternalProto failed to build"   
                                echo "`date` Build AtmOcnSelectExternalProto ************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectExternalProto built successfully"  
                                echo "`date` Build AtmOcnSelectExternalProto ............PASSED" >> $LOGDIR/mailMessage

                        fi

			echo "OCN_SELECT: B" > esm.config
                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnSelectExternalProto.B.ABC.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectExternalProto failed to run"                                
                                echo "`date` Run AtmOcnSelectExternalProto **************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectExternalProto ran"                                
                                echo "`date` Run AtmOcnSelectExternalProto ..............PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=C OCN=A,B,C --------------------------|" >> $LOGDIR/mailMessage
                        cd $NUOPCDIR/AtmOcnSelectExternalProto
                        gmake distclean
                        ./cleanSubs.csh
                        ./buildSubs.csh
                        gmake ATM=C OCN=A,B,C 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectExternalProto failed to build"   
                                echo "`date` Build AtmOcnSelectExternalProto ************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectExternalProto built successfully"  
                                echo "`date` Build AtmOcnSelectExternalProto ............PASSED" >> $LOGDIR/mailMessage

                        fi

			echo "OCN_SELECT: C" > esm.config
                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnSelectExternalProto.C.ABC.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectExternalProto failed to run"                                
                                echo "`date` Run AtmOcnSelectExternalProto **************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectExternalProto ran"                                
                                echo "`date` Run AtmOcnSelectExternalProto ..............PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=D OCN=A,B,C --------------------------|" >> $LOGDIR/mailMessage
                        cd $NUOPCDIR/AtmOcnSelectExternalProto
                        gmake distclean
                        ./cleanSubs.csh
                        ./buildSubs.csh
                        gmake ATM=D OCN=A,B,C 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectExternalProto failed to build"   
                                echo "`date` Build AtmOcnSelectExternalProto ************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto build failure">> $LOGDIR/mailMessage                 
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectExternalProto built successfully"  
                                echo "`date` Build AtmOcnSelectExternalProto ............PASSED" >> $LOGDIR/mailMessage

                        fi

			echo "OCN_SELECT: A" > esm.config
                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnSelectExternalProto.D.ABC.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectExternalProto failed to run"                                
                                echo "`date` Run AtmOcnSelectExternalProto **************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectExternalProto ran"                                
                                echo "`date` Run AtmOcnSelectExternalProto ..............PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi





                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=E OCN=A,B,C --------------------------|" >> $LOGDIR/mailMessage
                        cd $NUOPCDIR/AtmOcnSelectExternalProto
                        gmake distclean
                        ./cleanSubs.csh
                        ./buildSubs.csh
                        gmake ATM=E OCN=A,B,C 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectExternalProto failed to build"   
                                echo "`date` Build AtmOcnSelectExternalProto ************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectExternalProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectExternalProto built successfully"  
                                echo "`date` Build AtmOcnSelectExternalProto ............PASSED" >> $LOGDIR/mailMessage

                        fi

			echo "OCN_SELECT: B" > esm.config
                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnSelectExternalProto.E.ABC.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectExternalProto failed to run"                                
                                echo "`date` Run AtmOcnSelectExternalProto **************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectExternalProto ran"                                
                                echo "`date` Run AtmOcnSelectExternalProto ..............PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                                
                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=A OCN=A,B ----------------------------|" >> $LOGDIR/mailMessage

                        cd $NUOPCDIR/AtmOcnSelectProto
                        gmake distclean
                        gmake   ATM=A OCN=A,B 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectProto failed to build"   
                                echo "`date` Build AtmOcnSelectProto ********************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectProto built successfully"  
                                echo "`date` Build AtmOcnSelectProto ....................PASSED" >> $LOGDIR/mailMessage

                        fi
			echo "OCN_SELECT: A" > esm.config
                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnSelectExternalProto.A.AB.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectProto failed to run"                                
                                echo "`date` Run AtmOcnSelectProto **********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectProto ran"                                
                                echo "`date` Run AtmOcnSelectProto ......................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi


                        echo "" >> $LOGDIR/mailMessage
                        echo "|-------------------------------- ATM=B OCN=A,B ----------------------------|" >> $LOGDIR/mailMessage

                        cd $NUOPCDIR/AtmOcnSelectProto
                        gmake distclean
                        gmake  ATM=B OCN=A,B 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectProto failed to build"   
                                echo "`date` Build AtmOcnSelectProto ********************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectProto built successfully"  
                                echo "`date` Build AtmOcnSelectProto ....................PASSED" >> $LOGDIR/mailMessage

                        fi
                        echo "OCN_SELECT: A" > esm.config
                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnSelectExternalProto.B.AB.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectProto failed to run"                                
                                echo "`date` Run AtmOcnSelectProto **********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectProto ran"                                
                                echo "`date` Run AtmOcnSelectProto ......................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        echo "" >> $LOGDIR/mailMessage  
                        echo "|-------------------------------- ATM=A OCN=B ------------------------------|" >> $LOGDIR/mailMessage                       
                        cd $NUOPCDIR/AtmOcnSelectProto
                        gmake distclean
                        gmake  ATM=A OCN=B 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSelectProto failed to build"   
                                echo "`date` Build AtmOcnSelectProto ********************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSelectProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSelectProto built successfully"  
                                echo "`date` Build AtmOcnSelectProto ....................PASSED" >> $LOGDIR/mailMessage

                        fi
                        echo "OCN_SELECT: B" > esm.config
                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnSelectExternalProto.A.B.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSelectProto failed to run"                                
                                echo "`date` Run AtmOcnSelectProto **********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSelectProto ran"                                
                                echo "`date` Run AtmOcnSelectProto ......................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/AtmOcnSimpleImplicitProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnSimpleImplicitProto failed to build"   
                                echo "`date` Build AtmOcnSimpleImplicitProto ************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnSimpleImplicitProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnSimpleImplicitProto built successfully"  
                                echo "`date` Build AtmOcnSimpleImplicitProto ............PASSED" >> $LOGDIR/mailMessage

                        fi

 
 

                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnSimpleImplicitProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnSimpleImplicitProto failed to run"                                
                                echo "`date` Run AtmOcnSimpleImplicitProto **************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnSimpleImplicitProto ran"                                
                                echo "`date` Run AtmOcnSimpleImplicitProto ..............PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



        



                        cd $NUOPCDIR/AtmOcnTransferGridProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnTransferGridProto failed to build"  
                                echo "`date` Build AtmOcnTransferGridProto **************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage  
				echo "The following is the 'tail' of the AtmOcnTransferGridProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnTransferGridProto built successfully" 
                                echo "`date` Build AtmOcnTransferGridProto ..............PASSED" >> $LOGDIR/mailMessage

                        fi


                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnTransferGridProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnTransferGridProto failed to run"                                
                                echo "`date` Run AtmOcnTransferGridProto ****************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage 
				echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnTransferGridProto ran"                                
                                echo "`date` Run AtmOcnTransferGridProto ................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi





                        cd $NUOPCDIR/AtmOcnTransferLocStreamProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnTransferLocStreamProto failed to build"  
                                echo "`date` Build AtmOcnTransferLocStreamProto *********FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnTransferLocStreamProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " AtmOcnTransferLocStreamProto built successfully" 
                                echo "`date` Build AtmOcnTransferLocStreamProto .........PASSED" >> $LOGDIR/mailMessage

                        fi


                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnTransferLocStreamProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnTransferLocStreamProto failed to run"                                
                                echo "`date` Run AtmOcnTransferLocStreamProto ***********FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnTransferLocStreamProto ran"                                
                                echo "`date` Run AtmOcnTransferLocStreamProto ...........PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi



                        cd $NUOPCDIR/AtmOcnTransferMeshProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " AtmOcnTransferMeshProto failed to build"   
                                echo "`date` Build AtmOcnTransferMeshProto *************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the AtmOcnTransferMeshProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo "  AtmOcnTransferMeshProto built successfully"  
                                echo "`date` Build AtmOcnTransferMeshProto .............PASSED" >> $LOGDIR/mailMessage

                        fi






                        $ESMF_MPIRUN -np 4 ./esmApp 1> AtmOcnTransferMeshProto.stdout  2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " AtmOcnTransferMeshProto failed to run"                                
                                echo "`date` Run AtmOcnTransferMeshProto ***************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " AtmOcnTransferMeshProto ran"                                
                                echo "`date` Run AtmOcnTransferMeshProto ...............PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/ComponentExplorer
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
			./nuopcExplorerScript ../AtmOcnSelectExternalProto/ATM-A/atmA.mk 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " ComponentExplorer failed to build"   
                                echo "`date` Build ComponentExplorer *******************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the ComponentExplorer build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " ComponentExplorer built successfully"  
                                echo "`date` Build ComponentExplorer ...................PASSED" >> $LOGDIR/mailMessage

                        fi




                        $ESMF_MPIRUN -np 4 ./nuopcExplorerApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " ComponentExplorer failed to run"                                
                                echo "`date` Run ComponentExplorer *********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the ComponentExplorer run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " ComponentExplorer ran"                                
                                echo "`date` Run ComponentExplorer .....................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/CustomFieldDictionaryProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " CustomFieldDictionaryProto failed to build"   
                                echo "`date` Build CustomFieldDictionaryProto **********FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the CustomFieldDictionaryProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo "  CustomFieldDictionaryProto built successfully"  
                                echo "`date` Build CustomFieldDictionaryProto ..........PASSED" >> $LOGDIR/mailMessage

                        fi






                        $ESMF_MPIRUN -np 4 ./mainApp 1> CustomFieldDictionaryProto.stdout  2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " CustomFieldDictionaryProto failed to run"                                
                                echo "`date` Run CustomFieldDictionaryProto ************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " CustomFieldDictionaryProto ran"                                
                                echo "`date` Run CustomFieldDictionaryProto ............PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/DriverInDriverProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " DriverInDriverProto failed to build"   
                                echo "`date` Build DriverInDriverProto ******************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the DriverInDriverProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " DriverInDriverProto built successfully"  
                                echo "`date` Build DriverInDriverProto ..................PASSED" >> $LOGDIR/mailMessage

                        fi


                        $ESMF_MPIRUN -np 4 ./mainApp 1> DriverInDriverProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " DriverInDriverProto failed to run"                                
                                echo "`date` Run DriverInDriverProto ********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " DriverInDriverProto ran"                                
                                echo "`date` Run DriverInDriverProto ....................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        cd $NUOPCDIR/DriverInDriverProtoIPDv02
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " DriverInDriverProtoIPDv02 failed to build"   
                                echo "`date` Build DriverInDriverProtoIPDv02 ************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the DriverInDriverProtoIPDv02 build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " DriverInDriverProtoIPDv02 built successfully"  
                                echo "`date` Build DriverInDriverProtoIPDv02 ............PASSED" >> $LOGDIR/mailMessage

                        fi





        
                        $ESMF_MPIRUN -np 4 ./mainApp 1> DriverInDriverProtoIPDv02.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " DriverInDriverProtoIPDv02 failed to run"                                
                                echo "`date` Run DriverInDriverProtoIPDv02 **************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " DriverInDriverProtoIPDv02 ran"                                
                                echo "`date` Run DriverInDriverProtoIPDv02 ..............PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        cd $NUOPCDIR/DynPhyProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " DynPhyProto failed to build"   
                                echo "`date` Build DynPhyProto **************************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the DynPhyProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo "  DynPhyProto built successfully"  
                                echo "`date` Build DynPhyProto ..........................PASSED" >> $LOGDIR/mailMessage

                        fi






                        $ESMF_MPIRUN -np 4 ./esmApp 1> DynPhyProto.stdout  2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " DynPhyProto failed to run"                                
                                echo "`date` Run DynPhyProto ****************************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " DynPhyProto ran"                                
                                echo "`date` Run DynPhyProto ............................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/ExternalDriverAPIProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " ExternalDriverAPIProto failed to build"   
                                echo "`date` Build ExternalDriverAPIProto **************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the ExternalDriverAPIProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " ExternalDriverAPIProto built successfully"  
                                echo "`date` Build ExternalDriverAPIProto ..............PASSED" >> $LOGDIR/mailMessage

                        fi




                        $ESMF_MPIRUN -np 4 ./externalApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " ExternalDriverAPIProto failed to run"                                
                                echo "`date` Run ExternalDriverAPIProto ****************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the ExternalDriverAPIProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " ExternalDriverAPIProto ran"                                
                                echo "`date` Run ExternalDriverAPIProto ................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi
                        
                        
                        
                        cd $NUOPCDIR/GenericMediatorProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " GenericMediatorProto failed to build"   
                                echo "`date` Build GenericMediatorProto *****************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the GenericMediatorProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " GenericMediatorProto built successfully"  
                                echo "`date` Build GenericMediatorProto .................PASSED" >> $LOGDIR/mailMessage

                        fi

 

                        $ESMF_MPIRUN -np 4 ./app 1> GenericMediatorProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " GenericMediatorProto failed to run"                                
                                echo "`date` Run GenericMediatorProto *******************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " GenericMediatorProto ran"                                
                                echo "`date` Run GenericMediatorProto ...................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/HierarchyProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " HierarchyProto failed to build"   
                                echo "`date` Build HierarchyProto ***********************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the HierarchyProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " HierarchyProto built successfully"  
                                echo "`date` Build HierarchyProto .......................PASSED" >> $LOGDIR/mailMessage

                        fi






                        $ESMF_MPIRUN -np 4 ./esmApp 1> HierarchyProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " HierarchyProto failed to run"                                
                                echo "`date` Run HierarchyProto *************************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " HierarchyProto ran"                                
                                echo "`date` Run HierarchyProto .........................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi


                        cd $NUOPCDIR/NamespaceProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " NamespaceProto failed to build"   
				echo "`date` Build NamespaceProto ***********************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage  	
				echo "The following is the 'tail' of the NamespaceProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " NamespaceProto built successfully"  
				echo "`date` Build NamespaceProto .......................PASSED" >> $LOGDIR/mailMessage

                        fi


                        $ESMF_MPIRUN -np 4 ./mainApp 1> NamespaceProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " NamespaceProto failed to run"                                
                                echo "`date` Run NamespaceProto *************************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage 
				echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " NamespaceProto ran"                                
                                echo "`date` Run NamespaceProto .........................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`  

			fi


                        cd $NUOPCDIR/NestingMultipleProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " NestingMultipleProto failed to build"   
                                echo "`date` Build NestingMultipleProto *****************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the NestingMultipleProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " NestingMultipleProto built successfully"  
                                echo "`date` Build NestingMultipleProto .................PASSED" >> $LOGDIR/mailMessage

                        fi

 

 

                        $ESMF_MPIRUN -np 4 ./mainApp 1> NestingMultipleProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " NestingMultipleProto failed to run"                                
                                echo "`date` Run NestingMultipleProto *******************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " NestingMultipleProto ran"                                
                                echo "`date` Run NestingMultipleProto ...................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi



                        cd $NUOPCDIR/NestingSingleProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " NestingSingleProto failed to build"   
                                echo "`date` Build NestingSingleProto *******************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the NestingSingleProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " NestingSingleProto built successfully"  
                                echo "`date` Build NestingSingleProto ...................PASSED" >> $LOGDIR/mailMessage

                        fi

 

 

                        $ESMF_MPIRUN -np 4 ./mainApp 1> NestingSingleProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " NestingSingleProto failed to run"                                
                                echo "`date` Run NestingSingleProto *********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " NestingSingleProto ran"                                
                                echo "`date` Run NestingSingleProto .....................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi





                        cd $NUOPCDIR/NestingTelescopeMultipleProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " NestingTelescopeMultipleProto failed to build"   
                                echo "`date` Build NestingTelescopeMultipleProto ********FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the NestingTelescopeMultipleProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " NestingTelescopeMultipleProto built successfully"  
                                echo "`date` Build NestingTelescopeMultipleProto ........PASSED" >> $LOGDIR/mailMessage

                        fi

 



                        $ESMF_MPIRUN -np 4 ./mainApp 1> NestingTelescopeMultipleProto.stdout  2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " NestingTelescopeMultipleProto failed to run"                                
                                echo "`date` Run NestingTelescopeMultipleProto **********FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " NestingTelescopeMultipleProto ran"                                
                                echo "`date` Run NestingTelescopeMultipleProto ..........PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        cd $NUOPCDIR/SingleModelOpenMPProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " SingleModelOpenMPProto failed to build"   
                                echo "`date` Build SingleModelOpenMPProto **************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the SingleModelOpenMPProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " SingleModelOpenMPProto built successfully"  
                                echo "`date` Build SingleModelOpenMPProto ..............PASSED" >> $LOGDIR/mailMessage

                        fi




                        $ESMF_MPIRUN -np 4 ./mainApp  `pwd` $MPIRUN  1> tmp 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " SingleModelOpenMPProto failed to run"                                
                                echo "`date` Run SingleModelOpenMPProto ****************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the SingleModelOpenMPProto run failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " SingleModelOpenMPProto ran"                                
                                echo "`date` Run SingleModelOpenMPProto ................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`

                        fi




                        cd $NUOPCDIR/SingleModelProto
                        gmake distclean
                        echo "" >> $LOGDIR/mailMessage
                        gmake  ESMF_BOPT=$OPT 1> tmp 2>&1
                        if [ "$?" != "0" ]
                        then
                                echo " SingleModelProto failed to build"
                                echo "`date` Build SingleModelProto *********************FAILED" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the 'tail' of the SingleModelProto build failure">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                tail  -50 tmp >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi

                        else
                                echo " SingleModelProto built successfully"
                                echo "`date` Build SingleModelProto .....................PASSED" >> $LOGDIR/mailMessage


                        fi


                        $ESMF_MPIRUN -np 4 ./mainApp 1> SingleModelProto.stdout 2>&1
                        count=`grep FINISHED PET* | wc -l`
                        if [[ $count != "4" ]]
                        then
                                echo " SingleModelProto failed to run"
                                echo "`date` Run SingleModelProto ***********************FAILED" >> $LOGDIR/mailMessage
                                fail_num=`expr $fail_num + 1`
                                echo "" >> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                echo "The following is the output of cat PET*.ESMF_LogFile">> $LOGDIR/mailMessage
                                echo "" >> $LOGDIR/mailMessage
                                cat PET*.ESMF_LogFile  >> $LOGDIR/mailMessage
                                # Set test status as yellow, if it is not red
                                if !(grep "red" $LOGDIR/Test_Status)
                                then
                                        echo "Test_results:yellow" > $LOGDIR/Test_Status
                                        echo "Set Test Status to yellow."
                                fi
                                # Update number of test failures
                                read failures < $LOGDIR/Test_Failures
                                total=`expr $failures + 1`
                                echo "$total" > $LOGDIR/Test_Failures
                                echo "New failure total is $total."

                        else
                                echo " SingleModelProto ran"
                                echo "`date` Run SingleModelProto .......................PASSED" >> $LOGDIR/mailMessage
                                pass_num=`expr $pass_num + 1`
                        fi


        



		fi



	fi

fi #end of if [ "$?" != "0" ] for gmake ESMF_BOPT=$OPT  1> tmp 2>&1
cd $ESMF_DIR/..
rm -rf prototest.$OPT
mkdir prototest.$OPT
cp $NUOPCDIR/*/*stdout prototest.$OPT/.
tar cf prototest.$OPT.tar prototest.$OPT
gzip prototest.$OPT.tar
mv prototest.$OPT.tar.gz  $LOGDIR

# Make name as short as possible
export name=`uname -n | sed 's/\..*//'`


if [[ $test_results != 0 ]] 
then  #The build failed
	echo "**FAIL** $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI" >> $LOGDIR/summary
else
	if [[ $install_results != 0 ]]
        then  #The install failed
                echo "PASS FAIL $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI  $pass_num/$fail_num" >> $LOGDIR/summary
        else
                echo "PASS PASS $name($OPT) $ESMF_OS.$ESMF_COMPILER.$ESMF_COMM.$ESMF_ABI  $pass_num/$fail_num" >> $LOGDIR/summary
        fi
fi #end of if [$test_results != 0]



echo "" >> $LOGDIR/mailMessage


# keep expect happy
echo "test_esmf has finished"


